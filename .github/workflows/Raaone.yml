name: Java CI with Maven

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  Build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
    - name: Set up JDK 11
      uses: actions/setup-java@v3
      with:
        java-version: '11'
        distribution: 'temurin'
        cache: maven
    - name: Build with Maven
      run: mvn -B package --file pom.xml
    - name: Check .dockerignore
      run: |
          find . -name "WebApp.war"
      
  Docker_Scan:
    
    runs-on: ubuntu-latest
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Build an image from Dockerfile
        run: |
          docker build -t docker.io/jaivignesh-vunet/webapp2:${{ github.sha }} .
          
      - name: Run Trivy vulnerability scanner (Sarif)
        uses: aquasecurity/trivy-action@master
        if: always()
        with:
          image-ref: 'docker.io/jaivignesh-vunet/webapp2:${{ github.sha }}'
          format: 'sarif'
          output: 'docker-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v2
        if: always()
        with:
          name: docker-results
          path: docker-results.sarif
          
  import-issues:
  
      if: ${{ always() }}
      needs: [Docker_Scan]
      runs-on: ubuntu-latest
      steps:
      - name: get scan results
        uses: actions/download-artifact@v2
        with:
          name: docker-results
          
      - name: Convert SARIF to text
        run: |
          apt-get update && apt-get install -y jq
          jq -r '.runs[].results[].message.text' < docker-results.sarif > docker-results.txt
      
      - name: Find files
        run: |
          find . -name "docker-results.txt" 
          REPORTS_CONTENT=$(cat docker-results.txt)
          echo "$REPORTS_CONTENT"
      
      - name: Create or Update GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            docker-results.txt
          body: |
            Scan Report for Docker Image: `jaivignesh-vunet/webapp2:${{ github.sha }}`
          tag_name: ${{ github.sha }}
          
      - name: Get Release ID
        id: get_release
        run: |
          echo "Installing required dependencies..."
          npm install @actions/github

          echo "Fetching release ID..."
          node -e "const github = require('@actions/github'); const octokit = github.getOctokit('${{ secrets.ISSUE }}'); octokit.repos.getReleaseByTag({owner: '${{ github.repository_owner }}', repo: '${{ github.repository }}', tag: '${{ github.sha }}'}).then(response => { console.log('::set-output name=release_id::' + response.data.id); }).catch(error => { console.error(error); process.exit(1); });"


      - name: Upload Asset to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.get_release.outputs.release_id }}
          asset_path: ./docker-results.txt
          asset_name: docker-results.txt
          asset_content_type: text/plain

          
  Repo_Scan:

      runs-on: ubuntu-latest
      steps:
        - name: Checkout code
          uses: actions/checkout@v3
  
        - name: Run Trivy vulnerability scanner in repo mode
          uses: aquasecurity/trivy-action@master
          with:
            scan-type: 'fs'
            ignore-unfixed: true
            format: 'sarif'
            output: 'Repo-results.sarif'
            severity: 'CRITICAL,HIGH'
            
        - name: Upload Trivy scan results as artifact
          uses: actions/upload-artifact@v2
          with:
            name: Repo-results
            path: Repo-results.sarif
            
  IImport-issues:
      if: ${{ always() }}
      needs: [Repo_Scan]
      runs-on: ubuntu-latest
      steps:
      - name: get scan results
        uses: actions/download-artifact@v2
        with:
          name: Repo-results
          
      - name: Convert SARIF to text
        run: |
    
          apt-get update && apt-get install -y jq
          jq -r '.runs[].results[].message.text' < Repo-results.sarif > Repo-results.txt



      
      - name: Find files
        run: |
          find . -name "Repo-results.txt" 
          
      - name: Create GitHub issue
        run: |
    
          OWNER=jaivignesh-vunet
          REPO=webapp2
          
          REPORT_CONTENT=$(cat Repo-results.txt)
          echo "Heloooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooooo"
          echo "$REPORT_CONTENT"
          TOKEN="${{ secrets.ISSUE }}"
    
          curl -L \
            -X POST \
            -H "Accept: application/vnd.github+json" \
            -H "Authorization: Bearer $TOKEN"\
            -H "X-GitHub-Api-Version: 2022-11-28" \
            https://api.github.com/repos/jaivignesh-vunet/webapp2/issues \
            -d "{
            \"title\": \"Found a bugs\",
            \"body\": \"$ESCAPED_CONTENT\"
            }"
          

  Infrastructure_ascode:
    
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Run Trivy vulnerability scanner in IaC mode
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'config'
          hide-progress: false
          format: 'sarif'
          output: 'Infra-results.sarif'
          exit-code: '1'
          ignore-unfixed: true
          severity: 'CRITICAL,HIGH'
          
      - name: Upload Trivy scan results as artifact
        uses: actions/upload-artifact@v2
        with:
            name: Infra-results
            path: Infra-results.sarif    
            
            
  Truffle_Hog:
    name: TruffleHog Enterprise scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0 # fetch all history so multiple commits can be scanned
      - name: TruffleHog Enterprise scan
        uses: trufflesecurity/TruffleHog-Enterprise-Github-Action@main
        with:
            args: --fail-verified ${{ github.event.repository.default_branch }} HEAD
                  --json
  
  Build_Push_Docker:
    
      runs-on: ubuntu-latest
      steps:
      - name: Checkout code
        uses: actions/checkout@v2
        
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Build and push Docker Image
        uses: mr-smithers-excellent/docker-build-push@v4
        with:
          context: .  # The context for the build, assuming the Dockerfile is in the root of the repository
          push: true
          image: jay2k02/test-repository
          registry: docker.io
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      
        
        
      

    
